<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <mapper namespace="NoteMapper">
	<sql id="note_cols">
		tn.seq
	    ,tn.sender
	    ,tn.receiver
	    ,tn.content
	    ,tn.sendtime
	    ,tn.readtime
	    ,tn.sender_delete
	    ,tn.receiver_delete
	    ,tu.id as senderId
	    ,recv.id AS receiverId
	    ,tn.origin_note
	    ,tn.prev_note
    </sql>
	<insert id="createNote" parameterType="Note" 
		useGeneratedKeys="true"
		keyProperty="seq">
		insert into tb_note(sender,receiver,content,sendtime,prev_note,origin_note)
		values(#{sender},#{receiver},#{content},#{sendTime},#{prev_note},#{origin_note}) 
	</insert>
	
	<select id="countNewNotes" parameterType="int" resultType="int">
		select count(seq)
		  from tb_note
		  where receiver = #{receiver}
		   and readtime is null 
	</select>
	
	<select id="loadSendNote" parameterType="int" resultType="Note">
	 	 select
	 	 	<include refid="note_cols"></include>
		  from  tb_note tn
		  inner join tb_user tu 
			 on tn.sender = tu.seq 
		  inner join tb_user recv 
			 on tn.receiver = recv.seq     
		 where sender = #{sender}
		 and sender_delete = 'N'       
	</select>
	<select id="loadSendNoteByRange" parameterType="map" resultType="Note">
	 	 select
	 	 	<include refid="note_cols"></include>
		  from  tb_note tn
		  inner join tb_user tu 
			 on tn.sender = tu.seq 
		  inner join tb_user recv 
			 on tn.receiver = recv.seq     
		 where sender = #{sender}
		   and sender_delete = 'N'
		   <![CDATA[
			   and tn.seq < #{lastNoteSeq}
		   ]]>
		 order by tn.seq desc    
		 limit #{size}  
	</select>
	<select id="loadReceiverNote" parameterType="int" resultType="Note">
	 	 select 
	 	 	<include refid="note_cols"></include>
		  from  tb_note tn
		  inner join tb_user tu 
			 on tn.sender = tu.seq 
		  inner join tb_user recv 
			 on tn.receiver = recv.seq     
		 where receiver = #{receiver} 
		 and receiver_delete = 'N'      
	</select>
	<select id="readNote" parameterType="map" resultType="Note">
		 select 
		 	<include refid="note_cols"></include>
		  from  tb_note tn
		  inner join tb_user tu 
			 on tn.sender = tu.seq 
		  inner join tb_user recv 
			 on tn.receiver = recv.seq     
		 where receiver = #{receiverSeq} 
		 and tn.seq = #{noteSeq}
	</select>
	<update id="updateReadTime" parameterType="Note">
		update tb_note
		set readtime = #{readTime}
		where seq = #{seq}
	</update>
	<update id="updateOriginNote" parameterType="int">
		update tb_note
		set origin_note = #{seq}
		where seq = #{seq}
	</update>
	<select id="senderNote" resultType="Note" parameterType="map">
		select 
			<include refid="note_cols"></include>
		from  tb_note tn
		inner join tb_user tu 
		  on tn.sender = tu.seq 
		inner join tb_user recv 
		  on tn.receiver = recv.seq     
		where sender = #{senderSeq} 
		      and
		      tn.seq = #{noteSeq}
	</select>
	<update id="markAsDelete" parameterType="Note">
		update tb_note
		set	
			sender_delete = #{sender_Delete},
			receiver_delete = #{receiver_Delete}
		where seq = #{seq}	
	</update>
	<delete id="deleteNote" parameterType="Integer">
		delete from tb_note
		where seq = #{noteSeq}
	</delete>
	<select id="queryMessage" parameterType="map" resultType="Note">
		  select 
	 	 	<include refid="note_cols"></include>
		  from  tb_note tn
		  inner join tb_user tu 
			 on tn.sender = tu.seq 
		  inner join tb_user recv 
			 on tn.receiver = recv.seq     
		 where receiver = #{userSeq} 
		 and readtime is null
		<![CDATA[
		 and sendtime <= #{current}
		 and tn.seq > #{maxSeq}
		]]>
	</select>
	<select id="countReplyNote" parameterType="int" resultType="int">
		SELECT COUNT(seq)
		  FROM tb_note
		 WHERE prev_note = #{prev_note}
	</select>
	<select id="noteHistory" parameterType="map" resultType="Note">
		 select 
		 	<include refid="note_cols"></include>
		  from  tb_note tn
		  inner join tb_user tu 
			 on tn.sender = tu.seq 
		  inner join tb_user recv 
			 on tn.receiver = recv.seq     
		  where tn.origin_note = #{origin_note_Seq}
	</select>
 </mapper> 