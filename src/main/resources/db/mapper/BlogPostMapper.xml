<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="BlogPostMapper">
	<resultMap type="LocalUpFile" id="upFileMap">
		<id column="seq" property="seq"/>
		<result column="originname" property="originalName"/>
		<result column="genname" property="genName"/>
		<result column="filesize" property="fileSize"/>
		<result column="contenttype" property="contentType"/>
		<result column="post" property="post"/>
		<result column="origin" property="origin"/>
		<!-- 변환에 사용될 핸들러 클래스 지정 -->
		<!-- <result property="open" column="open" jdbcType="VARCHAR"
			typeHandler="naver.ppojoji.blog.typehandler.StringYnTypeHandler" /> -->
	</resultMap>
	<resultMap type="Post" id="PostMap">
		<id column="pseq" property="seq"/>
		<result column="title" property="title" />
		<result column="contents" property="contents"/>
		<result column="creation_date" property="creationDate"/>
		<result column="view_count" property="viewCount"/>
		<result column="last_date" property="lastDate"/>
		<!-- <result column="open" property="open"/> -->
		<result column="view_pass" property="viewPass"/>
		<result column="delYn" property="delYn"/>
		<!-- <result column="writer" property="writerSeq"/> -->
		<!-- 변환에 사용될 핸들러 클래스 지정 -->
		<result property="open" column="open"
			typeHandler="naver.ppojoji.blog.typehandler.StringYnTypeHandler" />
		<result property="ban" column="ban"/>
		<result property="bookmarked" column="post_ref"/>
		
		<association 
			column="writer" 
			property="writer" 
			select="UserMapper.findUserV1"/>
		<association 
			column="category" 
			property="category" 
			select="CategoryMapper.category"/>	
		<collection property="upFiles" ofType="LocalUpFile" resultMap="upFileMap"/>
		<!-- join query!!! FIXME
		<association 
			column="writer" 
			property="writer" 
			resultMap="UserMapper.UserMap"/>
		 -->
	</resultMap>
	<resultMap type="Post" id="PostWithTag" extends="PostMap">
		<collection property="tags" autoMapping="true" notNullColumn="tseq"
		 resultMap="TagMapper.TagMapInPost"></collection>
	</resultMap>
	<resultMap type="Post" id="PostWithCnt" extends="PostMap">
		<result column="cnt" property="replyCount"/>
		<result column="ufile_cnt" property="upfileCount"/> 
	</resultMap>
	<!-- 
		integer -> java.lang.Integer
		_int -> int, _long, _double
		long, double, short -. java.lang.Long ...
		
		map : java.util.Map
	 -->
	<!-- <select id="findPostBySeq" parameterType="integer" resultType="naver.ppojoji.blog.dto.Post">
	select
		seq,
		title,
		contents,
		creation_date as creationDate,
		view_count as viewCount,
		writer as writerSeq
	from
		TB_POST
	where
		seq = #{id}
	</select> -->
	<sql id="select_post">
		p.seq as pseq,
		p.title,
		p.contents,
		p.creation_date,
		p.view_count,
		p.writer,
		p.open,
		p.view_pass,
		p.category,
		p.last_date,
		p.delYn,
		p.ban
	</sql>
	<sql id="select_post_with_tag">
		p.pseq,
		p.title,
		p.contents,
		p.creation_date,
		p.view_count,
		p.writer,
		p.open,
		p.view_pass,
		p.category,
		p.last_date,
		p.delYn,
		p.ban
	</sql>
	
	<select id="findPostBySeq" parameterType="integer" resultMap="PostMap">
		select
			<include refid="select_post"></include>
			, f.*
		from
			tb_post p
		LEFT join 
			tb_files f
		on
			p.seq = f.post
		where
			p.seq = #{id}
	</select>
	<select id="findAllByAdmin" resultMap="PostMap" parameterType="map">
		select 
		 <include refid ="select_post"></include>
		 from tb_post p 
		 where delyn = 'N'
		 <if test = "userSeq != null">
			 and p.writer = #{userSeq}
		 </if>
		 <if test="banTypes != null">
		 	and ban in
		 	<foreach collection="banTypes" item="ban" index="index" separator="," open="(" close=")">
      			#{ban}
		    </foreach>
		 </if>
		 <if test="searchType != null">
		 	and ban = #{searchType}
		 </if>
	</select>
	<select id="findPostByUser" resultMap="PostMap" parameterType="map">
	select 
		 <include refid ="select_post"></include>
		 from tb_post p 
		 where delyn = 'N'
		 and p.writer = #{userSeq}
	</select>
	<select id="findBanByAdmin" resultMap="PostMap" parameterType="map">
		select 
		 <include refid ="select_post"></include>
		 from tb_post p
		 where ban = #{searchType}
		 and delyn = 'N'
	</select>
	<select id="findAllPost" resultMap="PostWithCnt" parameterType="boolean">
	SELECT
		<include refid="select_post"></include>
		,rp.cnt
		,fcnt.ufile_cnt
	FROM   tb_post p
       LEFT JOIN (SELECT p.seq,
                         Count(p.seq) AS cnt
                  FROM   tb_post p
                         INNER JOIN tb_reply r
                                 ON p.seq = r.parent
                  WHERE  p.open = 'Y'
                  GROUP  BY p.seq) rp
              ON rp.seq = p.seq
       LEFT JOIN (SELECT p.seq,
                         Count(tf.seq) AS ufile_cnt
                  FROM   tb_post p
                         LEFT JOIN tb_files tf
                                ON p.seq = tf.post
                  GROUP  BY p.seq) fcnt
              ON fcnt.seq = p.seq
		WHERE  1 = 1
			and open = #{open,typeHandler=naver.ppojoji.blog.typehandler.StringYnTypeHandler}
			and delYn = 'N'
			order by p.creation_date desc
	</select>
	<insert id="insertPost" parameterType="map" useGeneratedKeys="true" keyProperty="seq">
		insert into tb_post (
			title,
			contents,
			category,
			writer
		) values (
			#{title},
			#{contents},
			#{cateSeq},
			#{writeSeq}
		)
	</insert>
	<update id="updatePost2" parameterType="Post">
		update tb_post
		set
			title = #{title}
			, contents = #{contents}
			, category = #{category.seq}
			, last_date = current_timestamp
		where
			seq = #{seq} 
	</update>
	<delete id="deletePost" parameterType="Integer">
		delete from tb_post
		where seq=#{id}
	</delete>
	<update id="viewCount" parameterType="Integer">
		update tb_post 
		set view_count = view_count + 1
		where seq = #{seq}
	</update>
	<select id="open" parameterType="String" resultMap="PostMap">
		select
		<include refid="select_post"></include>
		from
			tb_post p
		where open=#{id}
	</select>
	<update id="updateOpen" parameterType="map">
		update tb_post 
		set open = #{isOpen, typeHandler=naver.ppojoji.blog.typehandler.StringYnTypeHandler}
		where seq = #{postSeq}
	</update>
	<select id="findPostByWriter" parameterType="Integer" resultMap="PostMap">
		select
			<include refid="select_post"></include>
		from
			tb_post p
		where writer = #{writerSeq}	
	</select>
	<select id="SearchPost" parameterType="Search" resultMap="PostMap">
		select 
			<include refid="select_post"></include> 
		from tb_post p
		where replace(${searchType}, chr(13),'') like '%${keyword}%'
		<!-- where  contains(${searchType},'%${keyword}%') >0 -->
	</select>
	<select id="MultiSearchPost" parameterType="multiSearch" resultMap="PostMap">
		select 
			<include refid="select_post"></include> 
		from tb_post p
		where 1=1
			<trim prefix="AND (" suffix=")" prefixOverrides="OR">
				<if test="title == true">
					OR title like '%' || #{multiKeyword, jdbcType=VARCHAR} || '%'
				</if>
				<if test="contents == true">
					OR contents like '%' || #{multiKeyword, jdbcType=VARCHAR} || '%'
				</if>
				<if test="writer == true">
					 OR writer = #{writerKeyword,jdbcType=INTEGER} 
				</if>
			</trim>
	</select>
	<select id="delYn" resultMap="PostMap">
		select 
			<include refid="select_post"></include> 
		from tb_post p
		where delyn='Y'
	</select>
	<update id="setAsDeleted" parameterType="integer">
		update tb_post 
		set delyn = 'Y'
		where seq = #{seq}
	</update>
	<delete id="deleteFile" parameterType="integer">
		delete from tb_files
		where seq = #{seq}
	</delete>
	<select id="findByCate" parameterType="map" resultMap="PostMap">
		select
		<include refid="select_post"></include>
		,rp.cnt
		from
			tb_post p
		LEFT JOIN (select
	            p.seq, 
	            count(p.seq) as cnt
	          from tb_post p 
	          inner join tb_reply r
	          on p.seq = r.parent
	          where p.open = 'Y'
	          group by p.seq )rp
	      ON rp.seq = p.seq	
		where
			category = #{seq}
		<if test = "openYn != null">
			and open = #{openYn}
		</if> 	
		<if test="delYn != null">
			and delyn = #{delYn}
		</if>
		order by p.creation_date desc
	</select>
	<select id="findByCate2" parameterType="map" resultMap="PostWithTag" >
		SELECT
			<include refid="select_post_with_tag"></include>
	    
	        , t.seq AS tseq
	       , t.tagname
	       , tb.post_ref
	       , f.*
		FROM   (
					SELECT
					   p.seq AS pseq,
		               p.title,
		               p.contents,
		               p.creation_date,
		               p.view_count,
		               p.writer,
		               p.open,
		               p.view_pass,
		               p.category,
		               p.last_date,
		               p.delyn,
		               p.ban,
		               ref.fileseq,
		               Count(rp.seq) AS cnt
		        FROM   (SELECT p.seq,
		                       Min(f.seq) AS fileseq
		                FROM   tb_post p
		                       LEFT JOIN tb_files f
		                              ON ( f.post = p.seq
		                                   AND f.contenttype LIKE 'image%' )
		                WHERE  p.category = #{cateSeq}
		                AND p.open ='Y'
						AND p.delyn = 'N'
		                GROUP  BY p.seq) ref
		               LEFT JOIN tb_reply rp
		                      ON rp.parent = ref.seq
		               JOIN tb_post p
		                 ON p.seq = ref.seq
		        GROUP  BY p.seq) p
		        LEFT JOIN tb_files f
		                      ON f.seq = p.fileseq
		       LEFT JOIN tb_posttag tp
		              ON tp.post = p.pseq
		       LEFT JOIN tb_tags t
		              ON t.seq = tp.tag
		       LEFT JOIN tb_bookmark tb
              		  ON p.pseq = tb.post_ref
				      AND tb.user_ref = #{userSeq}       
	</select>
	<!-- 
	<select id="findByCateName" parameterType="String" >
	select
		<include refid="select_post"></include>
		,rp.cnt
		from
			TB_POST p
		LEFT JOIN (select
	            p.seq, 
	            count(p.SEQ) as cnt
	          from TB_POST p 
	          inner join TB_REPLY r
	          on p.seq = r.PARENT
	          where p.OPEN = 'Y'
	          group by p.seq )rp
	      ON rp.seq = p.seq	
		where
			1 = 1 
		and open = 'Y'
		and category = #{seq}
		order by p.creation_date desc
	</select>
	 -->
	 <delete id="postDelete" parameterType="Post">
	 	delete from tb_post
	 	where seq=#{seq} 
	 </delete>
	 <select id="findpostsDelY" resultMap="PostMap">
	 SELECT
		<include refid="select_post"></include>
		, f.*
		FROM 
			tb_post p
		LEFT JOIN tb_files f 
		       ON f.post =  p.seq     
		WHERE p.delyn = 'Y'	
	 </select>
	 <update id="setPostPolicy" parameterType="map" >
	 	update tb_post
	 	set ban = #{code}
	 	where seq = #{postSeq}
	 </update>
</mapper>